import SwiftUI

// LoginView
struct LoginView: View {
    @State private var username: String = ""
    @State private var password: String = ""
    @State private var isShowingSignup = false  // For navigation to SignupView
    @State private var isAuthenticated = false   // Flag for successful login attempt
    @Environment(\.dismiss) private var dismiss  // To dismiss the view
    
    var body: some View {
        NavigationStack {
            VStack(spacing: 16) {
                // Logo
                VStack(spacing: 4) {
                    Image(systemName: "radio.fill")
                        .resizable()
                        .scaledToFit()
                        .frame(width: 70, height: 70)
                        .foregroundColor(.black)
                }
                .padding(.top, 50)
                
                // Title
                VStack(spacing: 4) {
                    Text("Log in to your account")
                        .font(.headline)
                    
                    Text("Enter your email to sign in for this app")
                        .font(.subheadline)
                        .foregroundColor(.gray)
                }
                .multilineTextAlignment(.center)
                .padding(.top, 8)
                
                // Input Fields
                VStack(spacing: 12) {
                    TextField("Username", text: $username)
                        .padding()
                        .background(Color(.systemGray6))
                        .cornerRadius(10)
                        .textInputAutocapitalization(.never)
                        .autocorrectionDisabled()
                    
                    SecureField("Password", text: $password)
                        .padding()
                        .background(Color(.systemGray6))
                        .cornerRadius(10)
                }
                .padding(.top, 12)
                
                // Login Button
                Button(action: {
                    loginUser()
                }) {
                    Text("Log in")
                        .foregroundColor(.white)
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color.black)
                        .cornerRadius(10)
                }
                .padding(.top, 8)
                
                // Create Account - navigate to SignupView
                HStack(spacing: 4) {
                    Text("Donâ€™t have an account?")
                        .foregroundColor(.gray)
                    Button(action: {
                        isShowingSignup = true
                    }) {
                        Text("Create Here")
                            .foregroundColor(.blue)
                    }
                }
                .font(.footnote)
                .padding(.top, 6)
                
                // Divider with OR
                HStack {
                    Rectangle()
                        .frame(height: 1)
                        .foregroundColor(.gray.opacity(0.4))
                    Text("or")
                        .foregroundColor(.gray)
                    Rectangle()
                        .frame(height: 1)
                        .foregroundColor(.gray.opacity(0.4))
                }
                .padding(.vertical, 12)
                
                // Google Button
                Button(action: { print("Google tapped") }) {
                    HStack {
                        Image(systemName: "globe")
                        Text("Continue with Google")
                    }
                    .foregroundColor(.black)
                    .frame(maxWidth: .infinity)
                    .padding()
                    .background(Color(.systemGray5))
                    .cornerRadius(10)
                }
                
                // Apple Button
                Button(action: { print("Apple tapped") }) {
                    HStack {
                        Image(systemName: "applelogo")
                        Text("Continue with Apple")
                    }
                    .foregroundColor(.black)
                    .frame(maxWidth: .infinity)
                    .padding()
                    .background(Color(.systemGray5))
                    .cornerRadius(10)
                }
                
                Spacer()
                
                // Terms
                Text("By clicking continue, you agree to our Terms of Service and Privacy Policy")
                    .font(.footnote)
                    .foregroundColor(.gray)
                    .multilineTextAlignment(.center)
                    .padding(.horizontal, 20)
                    .padding(.bottom, 45)
            }
            .padding(.horizontal, 20)
            .ignoresSafeArea(edges: .bottom)
            // Navigate to SignupView when isShowingSignup is true
            .navigationDestination(isPresented: $isShowingSignup) {
                SignupView()
            }
            
            // Show login success/failure alert
            .alert(isPresented: $isAuthenticated) {
                Alert(
                    title: Text("Login Successful"),
                    message: Text("You have logged in successfully!"),
                    dismissButton: .default(Text("OK"))
                )
            }
            
            // Conditional NavigationLink to MainTabView after successful login
            .background(
                NavigationLink(destination: MainTabView(), isActive: $isAuthenticated) {
                    EmptyView()
                }
                .hidden()
            )
        }
    }
    
    // Function to handle login
    private func loginUser() {
        // Retrieve stored credentials from UserDefaults
        let savedUsername = UserDefaults.standard.string(forKey: "savedUsername")
        let savedPassword = UserDefaults.standard.string(forKey: "savedPassword")
        
        // Check if entered credentials match the saved ones
        if username == savedUsername && password == savedPassword {
            // Simulate successful login
            isAuthenticated = true
        } else {
            isAuthenticated = false
            print("Login failed!")
        }
    }
}

// SignupView
struct SignupView: View {
    @Environment(\.dismiss) private var dismiss

    @State private var username: String = ""
    @State private var password: String = ""
    @State private var reEnterPassword: String = ""

    @State private var showPasswordMismatchAlert = false

    var body: some View {
        VStack(spacing: 16) {
            
            Text("Create your account")
                .font(.largeTitle)
                .bold()
                .padding(.top, 50)
            
            VStack(spacing: 12) {
                TextField("Username", text: $username)
                    .padding()
                    .background(Color(.systemGray6))
                    .cornerRadius(10)
                    .textInputAutocapitalization(.never)
                
                SecureField("Password", text: $password)
                    .padding()
                    .background(Color(.systemGray6))
                    .cornerRadius(10)
                
                SecureField("Re-Enter Password", text: $reEnterPassword)
                    .padding()
                    .background(Color(.systemGray6))
                    .cornerRadius(10)
            }
            .padding(.top, 20)
            
            Button(action: {
                if password == reEnterPassword && !password.isEmpty {
                    // Save the credentials to UserDefaults
                    UserDefaults.standard.set(username, forKey: "savedUsername")
                    UserDefaults.standard.set(password, forKey: "savedPassword")

                    dismiss()
                    print("Account Created - Username: \(username)")
                } else {
                    // Show alert for mismatch
                    showPasswordMismatchAlert = true
                }
            }) {
                Text("Create")
                    .foregroundColor(.white)
                    .frame(maxWidth: .infinity)
                    .padding()
                    .background(Color.black)
                    .cornerRadius(10)
            }
            .padding(.top, 12)
            .alert("Passwords do not match", isPresented: $showPasswordMismatchAlert) {
                Button("OK", role: .cancel) { }
            }
            
            Spacer()
        }
        .padding(.horizontal, 20)
    }
        .navigationBarBackButtonHidden(True)
}

// Preview
#Preview {
    LoginView()
}
